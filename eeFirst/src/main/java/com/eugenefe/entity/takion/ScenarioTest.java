package com.eugenefe.entity.takion;




import java.util.HashMap;
import java.util.Map;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.MapKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.eugenefe.embeddable.ScenarioTweek;
import com.eugenefe.entity.temp.TempTempMarketVariable;
import com.eugenefe.util.Navigatable;

/**
* Scenario generated by hbm2java
*/

@Entity
@Table(name = "SCENARIO", schema = "TAKION79")
public class ScenarioTest implements java.io.Serializable, Navigatable {

	private String scenarioId;
//	private ScenarioSet scenarioSet;
	private String scenarioName;
	private String scenarioType;
//	private List<ScenarionDetailTest> scenarioDetails = new ArrayList<ScenarionDetailTest>();

	public ScenarioTest() {
	}

	@Id
	@Column(name = "SCENARIO_ID", unique = true, nullable = false, length = 20)
	public String getScenarioId() {
		return this.scenarioId;
	}

	public void setScenarioId(String scenarioId) {
		this.scenarioId = scenarioId;

	}

//	@ManyToOne(fetch = FetchType.LAZY)
//	@JoinColumn(name = "SCENARIO_SET")
//	public ScenarioSet getScenarioSet() {
//		return this.scenarioSet;
//	}
//
//	public void setScenarioSet(ScenarioSet scenarioSet) {
//		this.scenarioSet = scenarioSet;
//
//	}

	@Column(name = "SCENARIO_NAME", length = 50)
	public String getScenarioName() {
		return this.scenarioName;
	}

	public void setScenarioName(String scenarioName) {
		this.scenarioName = scenarioName;

	}

	@Column(name = "SCENARIO_TYPE", length = 10)
	public String getScenarioType() {
		return this.scenarioType;
	}

	public void setScenarioType(String scenarioType) {
		this.scenarioType = scenarioType;

	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "scenario")
//	@OneToMany( mappedBy = "scenario")
//	public List<ScenarionDetailTest> getScenarioDetails() {
//		return scenarioDetails;
//	}
//
//	public void setScenarioDetails(List<ScenarionDetailTest> scenarioDetails) {
//		this.scenarioDetails = scenarioDetails;
//	}
	
	/*private Map<Bond, ScenarioTweek> aaa = new HashMap<Bond, ScenarioTweek>();
	
	
	@ElementCollection(fetch= FetchType.LAZY)
//	@Fetch(FetchMode.JOIN)
	@CollectionTable(name="SCENARIO_DETAIL", joinColumns =@JoinColumn(name="SCENARIO_ID"))
	@MapKeyJoinColumn(name ="MV_ID")
//	@AttributeOverrides({
//        @AttributeOverride(name="shockType", column=@Column(name="SHOCK_TYPE")),
//        @AttributeOverride(name="shockValue", column=@Column(name="SHOCK_VALUE")),
//      })
	public Map<Bond, ScenarioTweek> getAaa() {
		return aaa;
	}

	public void setAaa(Map<Bond, ScenarioTweek> aaa) {
		this.aaa = aaa;
	}*/
	private Map<TempTempMarketVariable, ScenarioTweek> aaa = new HashMap<TempTempMarketVariable, ScenarioTweek>();
	
	
	@ElementCollection(fetch= FetchType.LAZY)
//	@Fetch(FetchMode.JOIN)
	@CollectionTable(name="SCENARIO_DETAIL", joinColumns =@JoinColumn(name="SCENARIO_ID"))
	@MapKeyJoinColumn(name ="MV_ID")
//	@AttributeOverrides({
//        @AttributeOverride(name="shockType", column=@Column(name="SHOCK_TYPE")),
//        @AttributeOverride(name="shockValue", column=@Column(name="SHOCK_VALUE")),
//      })
	public Map<TempTempMarketVariable, ScenarioTweek> getAaa() {
		return aaa;
	}

	public void setAaa(Map<TempTempMarketVariable, ScenarioTweek> aaa) {
		this.aaa = aaa;
	}
	/**
	 * idString
	 * @return String
	 */
	@Transient
	public String idString() {
		StringBuffer buffer = new StringBuffer();
		buffer.append("#").append(getScenarioId());

		String rst = buffer.toString();

		return rst;
	}

	

	@Transient
	@Override
	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof ScenarioTest))
			return false;
		ScenarioTest castOther = (ScenarioTest) other;

		return this.idString().equals(castOther.idString());
	}

	@Transient
	@Override
	public int hashCode() {
		int result = 17;

		result = 37 * result + (idString() == null ? 0 : this.idString().hashCode());
		return result;
	}

}