package com.eugenefe.entity.temp;
// Generated Dec 19, 2016 6:36:07 PM by Hibernate Tools 5.2.0.Beta1 with Custom Template_takion!!!!!! 

import javax.persistence.Id;
import javax.persistence.Transient;
import com.eugenefe.util.Navigatable;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * RiskFactor generated by hbm2java
 */

@Entity
@Table(name = "RISK_FACTOR", schema = "TAKION79")
public class TempRiskFactor implements java.io.Serializable, Navigatable {

	private String rfId;
	private String rfName;
	private String rfType;
	private String sourceTable;
	private String userName;
	private String lastUpdated;
	private BigDecimal versionNo;
//	private Set<VcvMatrixHis> vcvMatrixHisesForRfId = new HashSet<VcvMatrixHis>(0);
//	private Set<PortfolioRiskDetail> portfolioRiskDetails = new HashSet<PortfolioRiskDetail>(0);
//	private Set<PositionRiskDetail> positionRiskDetails = new HashSet<PositionRiskDetail>(0);
//	private Set<VcvMatrixHis> vcvMatrixHisesForRefRfId = new HashSet<VcvMatrixHis>(0);

	public TempRiskFactor() {
	}

	@Id
	@Column(name = "RF_ID", unique = true, nullable = false, length = 20)
	public String getRfId() {
		return this.rfId;
	}

	public void setRfId(String rfId) {
		this.rfId = rfId;

	}

	@Column(name = "RF_NAME", length = 50)
	public String getRfName() {
		return this.rfName;
	}

	public void setRfName(String rfName) {
		this.rfName = rfName;

	}

	@Column(name = "RF_TYPE", length = 10)
	public String getRfType() {
		return this.rfType;
	}

	public void setRfType(String rfType) {
		this.rfType = rfType;

	}

	@Column(name = "SOURCE_TABLE", length = 50)
	public String getSourceTable() {
		return this.sourceTable;
	}

	public void setSourceTable(String sourceTable) {
		this.sourceTable = sourceTable;

	}

	@Column(name = "USER_NAME", length = 20)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;

	}

	@Column(name = "LAST_UPDATED", length = 8)
	public String getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(String lastUpdated) {
		this.lastUpdated = lastUpdated;

	}

	@Column(name = "VERSION_NO", precision = 22, scale = 0)
	public BigDecimal getVersionNo() {
		return this.versionNo;
	}

	public void setVersionNo(BigDecimal versionNo) {
		this.versionNo = versionNo;

	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "unresolved")
//	public Set<VcvMatrixHis> getVcvMatrixHisesForRfId() {
//		return this.vcvMatrixHisesForRfId;
//	}
//
//	public void setVcvMatrixHisesForRfId(Set<VcvMatrixHis> vcvMatrixHisesForRfId) {
//		this.vcvMatrixHisesForRfId = vcvMatrixHisesForRfId;
//
//	}
//
//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "unresolved")
//	public Set<PortfolioRiskDetail> getPortfolioRiskDetails() {
//		return this.portfolioRiskDetails;
//	}
//
//	public void setPortfolioRiskDetails(Set<PortfolioRiskDetail> portfolioRiskDetails) {
//		this.portfolioRiskDetails = portfolioRiskDetails;
//
//	}
//
//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "unresolved")
//	public Set<PositionRiskDetail> getPositionRiskDetails() {
//		return this.positionRiskDetails;
//	}
//
//	public void setPositionRiskDetails(Set<PositionRiskDetail> positionRiskDetails) {
//		this.positionRiskDetails = positionRiskDetails;
//
//	}
//
//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "unresolved")
//	public Set<VcvMatrixHis> getVcvMatrixHisesForRefRfId() {
//		return this.vcvMatrixHisesForRefRfId;
//	}
//
//	public void setVcvMatrixHisesForRefRfId(Set<VcvMatrixHis> vcvMatrixHisesForRefRfId) {
//		this.vcvMatrixHisesForRefRfId = vcvMatrixHisesForRefRfId;
//
//	}

	/**
	 * idString
	 * @return String
	 */
	@Transient
	public String idString() {
		StringBuffer buffer = new StringBuffer();
		buffer.append("#").append(getRfId());

		String rst = buffer.toString();

		return rst;
	}

	@Transient
	@Override
	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof TempRiskFactor))
			return false;
		TempRiskFactor castOther = (TempRiskFactor) other;

		return this.idString().equals(castOther.idString());
	}

	@Transient
	@Override
	public int hashCode() {
		int result = 17;

		result = 37 * result + (idString() == null ? 0 : this.idString().hashCode());
		return result;
	}

}
